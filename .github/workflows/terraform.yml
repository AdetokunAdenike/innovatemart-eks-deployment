name: Terraform & EKS Deployment

on:
  push:
    branches:
      - main
      - 'feature/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_DEFAULT_REGION: eu-west-1

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Format
        run: terraform fmt -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      # Save EKS cluster name and region for downstream jobs
      - name: Save EKS cluster info
        if: success()
        run: |
          echo "EKS_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
          echo "REGION=$(terraform output -raw region)" >> $GITHUB_ENV

  deploy:
    name: Deploy Retail Store App to EKS
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_DEFAULT_REGION: eu-west-1
      KUBECONFIG: ${{ github.workspace }}/kubeconfig
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: actions/setup-kubectl@v4
        with:
          version: v1.32.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Update kubeconfig for cluster
        run: |
          echo "Using cluster name: $EKS_NAME"
          aws eks update-kubeconfig \
            --name "$EKS_NAME" \
            --region $AWS_DEFAULT_REGION \
            --kubeconfig $KUBECONFIG

      - name: Clone retail-store sample (upstream)
        run: |
          git clone https://github.com/aws-containers/retail-store-sample-app.git retail-store || true
          ls -la retail-store

      - name: Apply Kubernetes manifests (preferred path)
        run: |
          set -euo pipefail
          if [ -d "retail-store/kubernetes" ]; then
            echo "Applying manifests from retail-store/kubernetes"
            kubectl apply -R -f retail-store/kubernetes
          elif [ -d "retail-store/deployment" ]; then
            echo "Applying manifests from retail-store/deployment"
            kubectl apply -R -f retail-store/deployment
          else
            echo "Fallback: applying everything under retail-store"
            kubectl apply -R -f retail-store
          fi

      - name: Wait for deployments to become ready
        run: |
          timeout=600
          echo "Waiting for pods to be ready (timeout ${timeout}s)..."
          kubectl wait --for=condition=Ready pods --all --timeout=${timeout}s || true
          for dep in $(kubectl get deploy --no-headers -o custom-columns=":metadata.name" || true); do
            echo "Waiting rollout for deployment $dep"
            kubectl rollout status deployment/$dep --timeout=180s || true
          done

      - name: Show deployed resources
        run: kubectl get pods,svc,deployments -A --show-labels
